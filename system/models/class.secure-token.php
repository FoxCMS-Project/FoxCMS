<?php
/*
 |  FoxCMS      Content Management Simplified <www.foxcms.org>
 |  @file       ./system/models/class.secure-token.php
 |  @author     SamBrishes@pytesNET
 |  @version    0.8.4 [0.8.4] - Alpha
 |
 |  @license    GNU GPL v3
 |  @copyright  Copyright © 2015 - 2018 SamBrishes, pytesNET <pytes@gmx.net>
 |
 |  @history    Copyright © 2009 - 2015 Martijn van der Kleijn <martijn.niji@gmail.com>
 |              Copyright © 2008 - 2009 Philippe Archambault <philippe.archambault@gmail.com>
 */
    if(!defined("FOXCMS")){ die(); }

    class SecureToken extends Record{
        const TABLE = "config_token";

        /*
         |  HELPER :: GET HASHED USER IP
         |  @since  0.8.4
         */
        static public function getIP(){
            $server = array(
                "HTTP_CLIENT_IP", "HTTP_X_FORWARDED_FOR", "HTTP_X_FORWARDED",
                "HTTP_FORWARDED_FOR", "HTTP_FORWARDED", "REMOTE_ADDR"
            );
            foreach($server AS $i){
                if(isset($_SERVER[$i]) && filter_var($_SERVER[$i], FILTER_VALIDATE_IP) !== false){
                    return md5($_SERVER[$i] . FOX_ID);
                }
            }
            return md5("127.0.0.1" . FOX_ID . session_id());
        }

        /*
         |  HELPER :: GET USER
         |  @since  0.8.4
         */
        static private function getUser($data){
            if(empty($data)){
                return 0;
            }

            if($data === true){
                if(AuthUser::isLoggedIn()){
                    $data = AuthUser::getUser();
                } else {
                    return self::getIP();
                }
            } else if(is_string($data) || is_numeric($data)){
                $data = User::findBy(is_string($data)? "username": "id", $data);
            }

            if(is_a($data, "User") && $data->id > 0){
                return md5($data->email . FOX_ID);
            }
            return false;
        }

        /*
         |  GENERATE A NEW TOKEN
         |  @since  0.8.4
         |
         |  @param  string  The respective nonce to tokenize.
         |  @param  multi   The user ID, the username (Wolf CMS), the 'User' object, OR
         |                  TRUE to get the current user, FALSE to skip the user data.
         |
         |  @return multi   The hashed token on success, FALSE on failure.
         */
        static public function generateToken($nonce, $user = true, $until = NULL){
            if(empty($nonce) || !is_string($nonce)){
                return false;
            }
            $args = array_merge(func_get_args(), array_slice(array(NULL, true, NULL), func_num_args()));
            $nonce = md5(urlencode(strip_tags($nonce)));

            // Clean expired Tokens
            $where = array(":date" => date("Y-m-d H:i:s"));
            Record::deleteWhere(self::TABLE, "valid_until <= :date", $where);

            // Get Data
            if(($userdata = self::getUser($user)) === false){
                return false;
            }
            if(($token = self::getToken($args[1], $args[0])) === false){
                $token = new SecureToken();
            }

            // Set Token
            $token->token = md5($nonce ."#". FOX_ID ."#". time());
            $token->secure = bin2hex(openssl_random_pseudo_bytes(11));
            $token->nonce = $nonce;
            $token->userhash = $userdata;
            $token->valid_until = !empty($until)? $until: 0;
            if(!$token->save()){
                return false;
            }

            // Return hashed Token
            $time = mk_time($token->created_on);
            if(version_compare(PHP_VERSION, "5.3.7", "<")){
                $hash = crypt($userdata. "-" .$time. "-" .$token->token, '$2a$07$'.$token->secure.'$');
            } else {
                $hash = crypt($userdata. "-" .$time. "-" .$token->token, '$2y$07$'.$token->secure.'$');
            }
            return substr($hash, -31);
        }

        /*
         |  VALIDATE A TOKEN
         |  @since  0.8.4
         |
         |  @param  string  The hashed token value, generated by `generateToken()`
         |  @param  string  The nonce, which has been tokenized.
         |  @param  multi   The user ID, the username (Wolf CMS), the 'User' object, OR
         |                  TRUE to get the current user, FALSE to skip the user data.
         |
         |  @return bool    TRUE if the token is (still) valid, FALSE if not.
         */
        static public function validateToken($token_hash, $nonce, $user = true){
            if(empty($token_hash) || !is_string($token_hash) || empty($nonce) || !is_string($nonce)){
                return false;
            }
            $args = array_merge(func_get_args(), array_slice(array(NULL, NULL, true), func_num_args()));
            $nonce = md5(urlencode(strip_tags($nonce)));

            // Get Data
            if(($userdata = self::getUser($user)) === false){
                return false;
            }
            if(($token = self::getToken($args[2], $args[1])) === false){
                return false;
            }

            // Create Hash
            $time = mk_time($token->created_on);
            if(version_compare(PHP_VERSION, "5.3.7", "<")){
                $hash = crypt($userdata. "-" .$time. "-" .$token->token, '$2a$07$'.$token->secure.'$');
            } else {
                $hash = crypt($userdata. "-" .$time. "-" .$token->token, '$2y$07$'.$token->secure.'$');
            }

            // Check Date
            if(mk_time($token->valid_until) < time()){
                $hash = strrev($hash);      // The script takes as long as if the token had not expired.
                $token->delete();
            }

            // Compare Tokens
            if(function_exists("hash_equals")){
                return hash_equals(substr($hash, -31), $token_hash);
            }
            return compare(substr($hash, -31), $token_hash);
        }

        /*
         |  GET A TOKEN
         |  @since  0.8.4
         |
         |  @param  multi   The user ID, the username (Wolf CMS9), the 'User' object, OR
         |                  TRUE to get the current user, FALSE to skip the user data.
         |  @param  string  The respecitve nonce, which has been tokenized.
         |
         |  @return multi   The token object on success, FALSE if not.
         */
        static public function getToken($user, $nonce){
            if(empty($nonce) || !is_string($nonce)){
                return false;
            }
            $nonce = md5(urlencode(strip_tags($nonce)));

            // Get Data
            if(($userdata = self::getUser($user)) === false){
                return false;
            }

            // Get Token
            $token = self::findOne(array(
                "where"     => "nonce = :nonce AND userhash = :user",
                "values"    => array(":nonce" => $nonce, ":user" => $userdata)
            ));
            if(!is_a($token, "SecureToken")){
                return false;
            }

            // Check Token
            if(mk_time($token->valid_until) < time()){
                $token->delete();
                return false;
            }
            return $token;
        }

        /*
         |  GET TOKEN TIKE
         |  @since  0.8.4
         |
         |  @param  multi   The user ID, the username (Wolf CMS9), the 'User' object, OR
         |                  TRUE to get the current user, FALSE to skip the user data.
         |  @param  string  The respecitve nonce, which has been tokenized.
         |
         |  @return multi   The token timestamp on success, FALSE on failure.
         */
        static public function getTokenTime($user, $nonce){
            if(($token = self::getToken($user, $nonce)) === false){
                return 0;
            }
            return mk_time($token->created_on);
        }


        /*
         |  DATA VARs
         */
        public $id;
        public $token;
        public $secure;
        public $nonce;
        public $userhash;
        public $created_on;
        public $valid_until;

        /*
         |  OVERWRITE GET COLUMNS
         |  @since  0.8.4
         */
        public function getColumns(){
            return array(
                "id", "token", "secure", "nonce", "userhash", "created_on", "valid_until"
            );
        }

        /*
         |  HOOK :: BEFORE SAVE
         |  @since  0.8.4
         */
        public function beforeSave(){
            $this->created_on = date("Y-m-d H:i:s");
            if(!is_string($this->valid_until)){
                $this->valid_until = date("Y-m-d H:i:s", empty($this->valid_until)? time()+TOKEN_LIFE: $this->valid_until);
            }
            if(mk_time($this->valid_until) <= time()){
                return false;
            }
            return true;
        }
    }
